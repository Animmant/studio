// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Provides personalized game recommendations based on user preferences and gaming history.
 *
 * - gameRecommendation - A function that provides game recommendations.
 * - GameRecommendationInput - The input type for the gameRecommendation function.
 * - GameRecommendationOutput - The return type for the gameRecommendation function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GameRecommendationInputSchema = z.object({
  preferences: z
    .string()
    .describe('The user preferences of the games, comma separated, such as: action, adventure, strategy'),
  gamingHistory: z
    .string()
    .describe('The user gaming history, comma separated, such as: God of War, Spider-Man, Horizon'),
});
export type GameRecommendationInput = z.infer<typeof GameRecommendationInputSchema>;

const GameRecommendationOutputSchema = z.object({
  recommendations: z.array(z.string()).describe('A list of game recommendations based on the user preferences and gaming history.'),
  reason: z.string().describe('The reasoning behind the game recommendations.'),
});
export type GameRecommendationOutput = z.infer<typeof GameRecommendationOutputSchema>;

export async function gameRecommendation(input: GameRecommendationInput): Promise<GameRecommendationOutput> {
  return gameRecommendationFlow(input);
}

const prompt = ai.definePrompt({
  name: 'gameRecommendationPrompt',
  input: {schema: GameRecommendationInputSchema},
  output: {schema: GameRecommendationOutputSchema},
  prompt: `You are a game recommendation expert. Based on the user's preferences and gaming history, provide a list of game recommendations.

User Preferences: {{{preferences}}}
Gaming History: {{{gamingHistory}}}

Provide a list of game recommendations that the user might enjoy.
Explain the reasoning behind the game recommendations.

{{#each recommendations}}
- {{{this}}}
{{/each}}`,
});

const gameRecommendationFlow = ai.defineFlow(
  {
    name: 'gameRecommendationFlow',
    inputSchema: GameRecommendationInputSchema,
    outputSchema: GameRecommendationOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
